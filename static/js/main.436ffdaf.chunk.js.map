{"version":3,"sources":["helpers/createBoard.js","components/context/BoardContext.js","components/context/GameContext.js","components/pieces/Piece.js","computer/computerPlaythrough.js","components/rows/Row.js","components/board/Board.js","helpers/kingMaker.js","helpers/startGame.js","helpers/scoreCounter.js","components/scores/Scores.js","Checkers.js","index.js"],"names":["createBoard","board","row","fillBoard","length","push","BoardContext","createContext","GameContext","Piece","square","idx","useContext","setBoard","gameHelpers","setGameHelpers","gameHasStarted","isPieceSelected","isComputerTurn","className","style","backgroundColor","filter","cursor","pointerEvents","display","onClick","target","setTimeout","selectedPiecePosition","nextRow","indexOf","x","undefined","tabIndex","onBlur","computerPlaythrough","newBoard","computerMovesOrJumps","randomRow","Math","floor","random","randomPiece","Row","rowIdx","map","squareIdx","key","pieceRow","pieceIdx","selectedRow","handleMove","Board","kingPlayer","kingComputer","kingMaker","id","splice","index","startGame","scoreCounter","player","score","reduce","a","b","Scores","alert","Checkers","useState","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.436ffdaf.chunk.js","sourcesContent":["\r\nexport const createBoard = (board = []) => {\r\n    const row = [null, null, null, null, null, null, null, null];\r\n\r\n    const fillBoard = (board) => {\r\n\r\n        if (board.length === 8) {\r\n            return board;\r\n        } else {\r\n            board.push([...row]);\r\n            return fillBoard(board);\r\n        }\r\n    }\r\n\r\n    fillBoard(board);\r\n\r\n    return board;\r\n\r\n}\r\n","import { createContext } from 'react';\r\n\r\n\r\nexport const BoardContext = createContext();","import { createContext } from 'react';\r\n\r\nexport const GameContext = createContext();","import React, { useContext } from 'react';\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport { GameContext } from '../context/GameContext';\r\n\r\nexport const Piece = ({row, square, idx}) => {\r\n\r\n    const {board, setBoard} = useContext(BoardContext);\r\n    const {gameHelpers, setGameHelpers} = useContext(GameContext);\r\n    const {gameHasStarted, isPieceSelected, isComputerTurn} = gameHelpers\r\n    \r\n    \r\n    const handleMovesAndJumps = ({target}) => {\r\n        \r\n        if (gameHasStarted && square === 'player' && !isComputerTurn) {\r\n            \r\n            setTimeout(() => {\r\n                setGameHelpers({\r\n                    ...gameHelpers,\r\n                    isPieceSelected: true,\r\n                    selectedPiecePosition: {\r\n                        row,\r\n                        idx\r\n                    }\r\n                });\r\n            }, 25);\r\n            \r\n            target.style.backgroundColor = '#66FF99'; \r\n            target.style.pointerEvents = 'none';\r\n            \r\n            const nextRow = board.indexOf(row) - 1; \r\n            \r\n            for (let x = -1; x <= 1 ; x += 2) {\r\n                \r\n                if (board[nextRow] !== undefined &&\r\n                    board[nextRow][idx + x] === null) {  \r\n                    \r\n                    setBoard((board) => board, board[nextRow][idx + x] = `movement${(x < 0) ? 1 : 2}`);\r\n                    \r\n                } else if (board[nextRow] !== undefined &&\r\n                           board[nextRow - 1] !== undefined && \r\n                           (board[nextRow][idx + x] === 'computer' ||\r\n                           board[nextRow][idx + x] === 'king-computer') &&\r\n                           board[nextRow - 1][idx + (x * 2)] === null) {\r\n                               \r\n                            setBoard((board) => board, board[nextRow - 1][idx + (x * 2)] = `jump${(x < 0) ? 1 : 2}`);\r\n\r\n                } \r\n                \r\n            }            \r\n            \r\n        }\r\n\r\n        if (gameHasStarted && square === 'king-player' && !isComputerTurn) {\r\n            \r\n            setTimeout(() => {\r\n                setGameHelpers({\r\n                    ...gameHelpers,\r\n                    isPieceSelected: true,\r\n                    selectedPiecePosition: {\r\n                        row,\r\n                        idx\r\n                    }\r\n                });\r\n            }, 25);\r\n            \r\n            target.style.backgroundColor = '#66FF99'; \r\n            target.style.pointerEvents = 'none';\r\n            \r\n            const nextRow = board.indexOf(row) - 1; \r\n            \r\n            for (let x = -1; x <= 1 ; x += 2) {\r\n                \r\n                if (board[nextRow] !== undefined &&\r\n                    board[nextRow][idx + x] === null) {  \r\n                    \r\n                    setBoard((board) => board, board[nextRow][idx + x] = `movement${(x < 0) ? 1 : 2}`);\r\n                } \r\n                \r\n                if (board[nextRow + 2] !== undefined &&\r\n                    board[nextRow + 2][idx + x] === null) {\r\n\r\n                    setBoard((board) => board, board[nextRow + 2][idx + x] = `movement${(x < 0) ? 1 : 2}`);\r\n                } \r\n                \r\n                if (board[nextRow] !== undefined &&\r\n                    board[nextRow - 1] !== undefined && \r\n                    (board[nextRow][idx + x] === 'computer' ||\r\n                    board[nextRow][idx + x] === 'king-computer') &&\r\n                    board[nextRow - 1][idx + (x * 2)] === null) {\r\n                        \r\n                        setBoard((board) => board, board[nextRow - 1][idx + (x * 2)] = `jump${(x < 0) ? 1 : 3}`);\r\n                }  \r\n                \r\n                if (board[nextRow + 3] !== undefined &&\r\n                    board[nextRow + 2] !== undefined && \r\n                    (board[nextRow + 2][idx + x] === 'computer' ||\r\n                    board[nextRow + 2][idx + x] === 'king-computer') &&\r\n                    board[nextRow + 3][idx + (x * 2)] === null) {\r\n\r\n                        setBoard((board) => board, board[nextRow + 3][idx + (x * 2)] = `jump${(x < 0) ? 2 : 4}`);\r\n                }\r\n                \r\n            }            \r\n            \r\n        }\r\n    }\r\n    \r\n\r\n    const handleBlur = ({target}) => {\r\n        \r\n        if (gameHasStarted && square === 'player' && !isComputerTurn) {\r\n\r\n            target.style.backgroundColor = '#C40003';\r\n            target.style.pointerEvents = 'all';\r\n            \r\n                setTimeout(() => {\r\n                    setGameHelpers({\r\n                        ...gameHelpers,\r\n                        isPieceSelected: (isPieceSelected) ? true : false,\r\n                    });    \r\n                }, 150);\r\n\r\n\r\n            const nextRow = board.indexOf(row) - 1; \r\n\r\n\r\n            for (let x = -1; x <= 1 ; x += 2) {\r\n\r\n                if (board[nextRow] !== undefined &&\r\n                    (board[nextRow][idx + x] === 'movement1' ||\r\n                    board[nextRow][idx + x] === 'movement2')) {  \r\n                    \r\n                    setBoard((board) => board, board[nextRow][idx + x] = null);\r\n                    \r\n                } else if (board[nextRow] !== undefined &&\r\n                           board[nextRow - 1] !== undefined &&\r\n                           (board[nextRow][idx + x] === 'computer' ||\r\n                           board[nextRow][idx + x] === 'king-computer') &&\r\n                           (board[nextRow - 1][idx + (x * 2)] === 'jump1' ||\r\n                           board[nextRow - 1][idx + (x * 2)] === 'jump2')) {\r\n                                \r\n                            setBoard((board) => board, board[nextRow - 1][idx + (x * 2)] = null);\r\n\r\n                }  \r\n            }\r\n                        \r\n        }\r\n\r\n         if (gameHasStarted && square === 'king-player' && !isComputerTurn) {\r\n            \r\n            target.style.backgroundColor = '#FFD700'; \r\n            target.style.pointerEvents = 'all';\r\n\r\n             setTimeout(() => {\r\n                    setGameHelpers({\r\n                        ...gameHelpers,\r\n                        isPieceSelected: (isPieceSelected) ? true : false,\r\n                    });    \r\n                }, 150);\r\n            \r\n            const nextRow = board.indexOf(row) - 1; \r\n            \r\n            for (let x = -1; x <= 1 ; x += 2) {\r\n                \r\n                if (board[nextRow] !== undefined &&\r\n                    (board[nextRow][idx + x] === 'movement1' ||\r\n                    board[nextRow][idx + x] === 'movement2' ||\r\n                    board[nextRow][idx + x] === 'movement3' ||\r\n                    board[nextRow][idx + x] === 'movement4')) {  \r\n                    \r\n                    setBoard((board) => board, board[nextRow][idx + x] = null);\r\n                    \r\n                } \r\n                \r\n                if (board[nextRow + 2] !== undefined &&\r\n                    (board[nextRow + 2][idx + x] === 'movement1' ||\r\n                    board[nextRow + 2][idx + x] === 'movement2' ||\r\n                    board[nextRow + 2][idx + x] === 'movement3' ||\r\n                    board[nextRow + 2][idx + x] === 'movement4')) {\r\n\r\n                    setBoard((board) => board, board[nextRow + 2][idx + x] = null);\r\n\r\n                } \r\n                \r\n                if (board[nextRow] !== undefined &&\r\n                    board[nextRow - 1] !== undefined && \r\n                    (board[nextRow][idx + x] === 'computer' ||\r\n                    board[nextRow][idx + x] === 'king-computer') &&\r\n                    (board[nextRow - 1][idx + (x * 2)] === 'jump1' ||\r\n                    board[nextRow - 1][idx + (x * 2)] === 'jump2' ||\r\n                    board[nextRow - 1][idx + (x * 2)] === 'jump3' ||\r\n                    board[nextRow - 1][idx + (x * 2)] === 'jump4')) {\r\n                        \r\n                        setBoard((board) => board, board[nextRow - 1][idx + (x * 2)] = null);\r\n\r\n                }  \r\n                \r\n                if (board[nextRow + 3] !== undefined &&\r\n                    board[nextRow + 2] !== undefined && \r\n                    (board[nextRow + 2][idx + x] === 'computer' ||\r\n                    board[nextRow + 2][idx + x] === 'king-computer') &&\r\n                    (board[nextRow + 3][idx + (x * 2)] === 'jump1' ||\r\n                    board[nextRow + 3][idx + (x * 2)] === 'jump2' ||\r\n                    board[nextRow + 3][idx + (x * 2)] === 'jump3' ||\r\n                    board[nextRow + 3][idx + (x * 2)] === 'jump4')) {\r\n\r\n                        setBoard((board) => board, board[nextRow + 3][idx + (x * 2)] = null);\r\n                        \r\n                }\r\n                \r\n            }            \r\n\r\n         }\r\n    }\r\n    \r\n    return (\r\n        <div \r\n            className=\"pieces\"\r\n            style={\r\n                (gameHasStarted && square === 'computer') ? {backgroundColor: '#FFF9F4', filter: 'none'} : \r\n                (gameHasStarted && square === 'king-computer') ? {backgroundColor: '#B9F2FF', filter: 'none'} : \r\n                (gameHasStarted && !isComputerTurn && square === 'player') ? {backgroundColor: '#C40003', cursor: 'pointer', pointerEvents: 'all'} :\r\n                (gameHasStarted && !isComputerTurn && square === 'king-player') ? {backgroundColor: '#FFD700', cursor: 'pointer', pointerEvents: 'all'} :\r\n                (isComputerTurn && square === 'king-player') ? {backgroundColor: '#FFD700', cursor: 'default', pointerEvents: 'none'} :\r\n                (isComputerTurn && square === 'player') ? {backgroundColor: '#C40003', cursor: 'default', pointerEvents: 'none'} :\r\n                {display:'none'}\r\n            }\r\n            onClick={handleMovesAndJumps}\r\n            tabIndex=\"1\"\r\n            onBlur={handleBlur}\r\n        >\r\n            \r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const computerPlaythrough = (board = []) => {\r\n    \r\n    const newBoard = [...board];\r\n    \r\n\r\n    const computerMovesOrJumps = () => {\r\n        const randomRow = newBoard.indexOf(newBoard[Math.floor(Math.random() * newBoard.length)]);\r\n        const randomPiece = newBoard[randomRow].indexOf(newBoard[randomRow][Math.floor(Math.random() * newBoard[randomRow].length)]);\r\n        const nextRow = randomRow + 1; \r\n\r\n        if (newBoard[randomRow][randomPiece] === null ||\r\n            newBoard[randomRow][randomPiece] === 'king-player' || \r\n            newBoard[randomRow][randomPiece] === 'player') {\r\n                \r\n            return computerMovesOrJumps();\r\n\r\n        } else if (newBoard[randomRow][randomPiece] === 'king-computer') {\r\n\r\n            if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow + 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece + 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece + 1] === 'king-player') &&\r\n                newBoard[nextRow + 1][randomPiece + 2] === null) {\r\n\r\n                newBoard[nextRow][randomPiece + 1] = null;\r\n                newBoard[nextRow + 1][randomPiece + 2] = 'king-computer';\r\n                newBoard[randomRow][randomPiece] = null;\r\n\r\n                    \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow - 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece + 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece + 1] === 'king-player') &&\r\n                newBoard[nextRow - 1][randomPiece + 2] === null) {\r\n\r\n                newBoard[nextRow][randomPiece + 1] = null;\r\n                newBoard[nextRow - 1][randomPiece + 2] = 'king-computer';\r\n                newBoard[randomRow][randomPiece] = null;\r\n                \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow + 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece - 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece - 1] === 'king-player') &&\r\n                newBoard[nextRow + 1][randomPiece - 2] === null) {\r\n                            \r\n                newBoard[nextRow][randomPiece - 1] = null;\r\n                newBoard[nextRow + 1][randomPiece - 2] = 'king-computer';\r\n                newBoard[randomRow][randomPiece] = null;\r\n\r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow - 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece + 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece + 1] === 'king-player') &&\r\n                newBoard[nextRow - 1][randomPiece - 2] === null) {\r\n\r\n                newBoard[nextRow][randomPiece + 1] = null;\r\n                newBoard[nextRow - 1][randomPiece - 2] = 'king-computer';\r\n                newBoard[randomRow][randomPiece] = null;\r\n\r\n                \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow][randomPiece + 1] === null) {  \r\n                \r\n                    newBoard[randomRow][randomPiece] = null;\r\n                    newBoard[nextRow][randomPiece + 1] = 'king-computer';\r\n                \r\n            } else if (newBoard[randomRow - 1] !== undefined &&\r\n                newBoard[randomRow - 1][randomPiece + 1] === null) {  \r\n                \r\n                newBoard[randomRow][randomPiece] = null;\r\n                newBoard[randomRow - 1][randomPiece + 1] = 'king-computer';\r\n            \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow][randomPiece - 1] === null) {\r\n        \r\n                newBoard[randomRow][randomPiece] = null;\r\n                newBoard[nextRow][randomPiece - 1] = 'king-computer';\r\n                            \r\n            } else if (newBoard[randomRow - 1] !== undefined &&\r\n                newBoard[randomRow - 1][randomPiece - 1] === null) {  \r\n                \r\n                newBoard[randomRow][randomPiece] = null;\r\n                newBoard[randomRow - 1][randomPiece - 1] = 'king-computer';\r\n            \r\n            } else {\r\n                computerMovesOrJumps()\r\n            }\r\n\r\n        } else if (newBoard[randomRow][randomPiece] === 'computer') {\r\n\r\n            if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow + 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece + 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece + 1] === 'king-player') &&\r\n                newBoard[nextRow + 1][randomPiece + 2] === null) {\r\n\r\n                newBoard[nextRow][randomPiece + 1] = null;\r\n                newBoard[nextRow + 1][randomPiece + 2] = 'computer';\r\n                newBoard[randomRow][randomPiece] = null;\r\n\r\n                \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow + 1] !== undefined &&\r\n                (newBoard[nextRow][randomPiece - 1] === 'player' ||\r\n                newBoard[nextRow][randomPiece - 1] === 'king-player') &&\r\n                newBoard[nextRow + 1][randomPiece - 2] === null) {\r\n                            \r\n                    newBoard[nextRow][randomPiece - 1] = null;\r\n                    newBoard[nextRow + 1][randomPiece - 2] = 'computer';\r\n                    newBoard[randomRow][randomPiece] = null;\r\n\r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow][randomPiece + 1] === null) {  \r\n                \r\n                    newBoard[randomRow][randomPiece] = null;\r\n                    newBoard[nextRow][randomPiece + 1] = 'computer';\r\n                \r\n            } else if (newBoard[nextRow] !== undefined &&\r\n                newBoard[nextRow][randomPiece - 1] === null) {\r\n        \r\n                    newBoard[randomRow][randomPiece] = null;\r\n                    newBoard[nextRow][randomPiece - 1] = 'computer';\r\n                            \r\n            } else {\r\n                computerMovesOrJumps()\r\n            }\r\n\r\n        } else {\r\n            computerMovesOrJumps()\r\n        }\r\n\r\n    }            \r\n        \r\n        computerMovesOrJumps();\r\n        return newBoard;\r\n\r\n}","import React, { useContext } from 'react'\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { Piece } from '../pieces/Piece'\r\nimport {computerPlaythrough} from '../../computer/computerPlaythrough';\r\n\r\nexport const Row = ({row, rowIdx}) => {\r\n    \r\n    const {gameHelpers, setGameHelpers} = useContext(GameContext);\r\n    const {isPieceSelected, selectedPiecePosition} = gameHelpers;\r\n    const {board, setBoard} = useContext(BoardContext);\r\n\r\n    const handleMove = (row, square, squareIdx) => {\r\n        \r\n        if (isPieceSelected &&\r\n            board[board.indexOf(selectedPiecePosition.row)][selectedPiecePosition.idx] === 'player' &&\r\n            (square === 'movement1' || square === 'movement2')) {\r\n            \r\n            const pieceRow = board.indexOf(selectedPiecePosition.row);\r\n            const pieceIdx = selectedPiecePosition.idx;\r\n            \r\n            board[pieceRow][pieceIdx] = null;\r\n            \r\n            const selectedRow = board.indexOf(row);\r\n            board[selectedRow][squareIdx] = 'player';\r\n            \r\n            gameHelpers.isComputerTurn = true;\r\n\r\n            \r\n            setTimeout(() => {\r\n                setBoard(computerPlaythrough(board));\r\n                setGameHelpers({...gameHelpers, isComputerTurn: false})\r\n            }, 2500);\r\n            \r\n        }\r\n\r\n        if (isPieceSelected &&\r\n            board[board.indexOf(selectedPiecePosition.row)][selectedPiecePosition.idx] === 'player' &&\r\n            (square === 'jump1' || square === 'jump2')) {\r\n            \r\n            const pieceRow = board.indexOf(selectedPiecePosition.row);\r\n            const pieceIdx = selectedPiecePosition.idx\r\n            \r\n            board[pieceRow][pieceIdx] = null;\r\n            \r\n            const selectedRow = board.indexOf(row);\r\n            board[selectedRow][squareIdx] = 'player';\r\n            \r\n            if (square === 'jump1') {\r\n                board[selectedRow + 1][squareIdx + 1] = null;\r\n            } \r\n\r\n            if (square === 'jump2') {\r\n                board[selectedRow + 1][squareIdx - 1] = null;\r\n            }\r\n\r\n            gameHelpers.isComputerTurn = true;\r\n\r\n            \r\n            setTimeout(() => {\r\n                setBoard(computerPlaythrough(board));\r\n                setGameHelpers({...gameHelpers, isComputerTurn: false})\r\n            }, 2500);\r\n            \r\n        }\r\n\r\n        if (isPieceSelected && \r\n            board[board.indexOf(selectedPiecePosition.row)][selectedPiecePosition.idx] === 'king-player' &&\r\n           (square === 'movement1' || square === 'movement2' ||\r\n           square === 'movement3' ||square === 'movement4')) {\r\n            \r\n            const pieceRow = board.indexOf(selectedPiecePosition.row);\r\n            const pieceIdx = selectedPiecePosition.idx;\r\n            \r\n            \r\n            \r\n            board[pieceRow][pieceIdx] = null;\r\n            const selectedRow = board.indexOf(row);\r\n            \r\n            board[selectedRow][squareIdx] = 'king-player';\r\n            \r\n            gameHelpers.isComputerTurn = true;\r\n\r\n            \r\n            setTimeout(() => {\r\n                setBoard(computerPlaythrough(board));\r\n                setGameHelpers({...gameHelpers, isComputerTurn: false})\r\n            }, 2500);\r\n            \r\n        }\r\n\r\n        if (isPieceSelected &&\r\n            board[board.indexOf(selectedPiecePosition.row)][selectedPiecePosition.idx] === 'king-player' &&\r\n           (square === 'jump1' || square === 'jump2' ||\r\n           square === 'jump3' || square === 'jump4')) {\r\n            \r\n            const pieceRow = board.indexOf(selectedPiecePosition.row);\r\n            const pieceIdx = selectedPiecePosition.idx\r\n\r\n            board[pieceRow][pieceIdx] = null;\r\n\r\n            const selectedRow = board.indexOf(row);\r\n            board[selectedRow][squareIdx] = 'king-player';\r\n\r\n            \r\n            if (square === 'jump1') {\r\n                board[selectedRow + 1][squareIdx + 1] = null;\r\n            } \r\n\r\n            if (square === 'jump2') {\r\n                board[selectedRow - 1][squareIdx + 1] = null;\r\n            }\r\n\r\n            if (square === 'jump3') {\r\n                board[selectedRow + 1][squareIdx - 1] = null;\r\n            } \r\n\r\n            if (square === 'jump4') {\r\n                board[selectedRow - 1][squareIdx - 1] = null;\r\n            }\r\n\r\n            gameHelpers.isComputerTurn = true;\r\n\r\n            \r\n            setTimeout(() => {\r\n                setBoard(computerPlaythrough(board));\r\n                setGameHelpers({...gameHelpers, isComputerTurn: false})\r\n            }, 2500);\r\n            \r\n        }\r\n\r\n\r\n    }\r\n    \r\n    \r\n    return (\r\n        <>\r\n        {\r\n            row.map((square, squareIdx) => (\r\n                <div\r\n                className=\"square\" \r\n                style={\r\n                    (isPieceSelected && (square === 'movement1' || square === 'movement2' || \r\n                    square === 'movement3' || square === 'movement4' ||\r\n                    square === 'jump1' || square === 'jump2' ||\r\n                    square === 'jump3' ||square === 'jump4')) ? \r\n                    {backgroundColor: '#66FF99', cursor: 'pointer'} :\r\n                    \r\n                    (squareIdx % 2 !== 0 && rowIdx % 2 === 0) ? {backgroundColor: '#D18B47'} : \r\n                    (squareIdx % 2 === 0 && rowIdx % 2 !== 0) ? {backgroundColor: '#D18B47'} :\r\n                    null\r\n                }\r\n                key={`row-${rowIdx}-square-${squareIdx + 1}`}\r\n                onClick={() => handleMove(row, square, squareIdx)}\r\n                >\r\n                    <Piece row={row} square={square} idx={squareIdx} />\r\n\r\n                </div>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { createBoard } from '../../helpers/createBoard';\r\nimport { startGame } from '../../helpers/startGame';\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport { GameContext } from '../context/GameContext';\r\nimport { Row } from '../rows/Row';\r\nimport {kingMaker} from '../../helpers/kingMaker';\r\n\r\nexport const Board = () => {\r\n\r\n    const {board, setBoard} = useContext(BoardContext);\r\n    const {gameHelpers, setGameHelpers} = useContext(GameContext);\r\n    const {gameHasStarted} = gameHelpers;\r\n    \r\n    const kingPlayer = board[0].indexOf('player');\r\n    const kingComputer = board[7].indexOf('computer');\r\n\r\n    if (kingPlayer >= 0 || kingComputer >= 0) {\r\n        kingMaker(kingPlayer, kingComputer, board);\r\n    }\r\n\r\n    const handleStart = () => {\r\n        setBoard(startGame(createBoard()));\r\n        setTimeout(() => {\r\n            setGameHelpers({\r\n                gameHasStarted: !gameHasStarted,\r\n                isPieceSelected: false,\r\n                selectedPiecePosition: null,\r\n                isComputerTurn: false,\r\n            });\r\n        }, 200);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        \r\n        <button \r\n            id=\"start\" \r\n            onClick={handleStart}\r\n            style={\r\n                (gameHasStarted) ? {backgroundColor:'#D53430'} : null\r\n            }\r\n            \r\n        >\r\n            {\r\n                (!gameHasStarted) ? 'Start Game' : 'Finish'\r\n            }\r\n        </button>\r\n        \r\n        <div id=\"board\">\r\n            \r\n            {\r\n                board.map((row, rowIdx) => (\r\n                    <div className=\"row\" key={`row-${rowIdx + 1}`}>\r\n                        {\r\n                            <Row row={row} rowIdx={rowIdx} />\r\n                        }\r\n                    </div>\r\n                ))\r\n            }\r\n\r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","\r\n\r\nexport const kingMaker = (kingPlayer, kingComputer, board = []) => {\r\n\r\n    if (kingPlayer >= 0) {\r\n        board[0][kingPlayer] = 'king-player';\r\n    }\r\n\r\n    if (kingComputer >= 0) {\r\n        board[7][kingComputer] = 'king-computer';\r\n    }\r\n\r\n} ","\r\nexport const startGame = (board = []) => {\r\n\r\n    // Computer pieces\r\n    \r\n    for (let x = 0; x <= 2; x++) {\r\n        if (x % 2 === 0) {\r\n            board.splice(x, 1, board[x].map((square, index) => {\r\n                if (index % 2 !== 0) {\r\n                    return 'computer';\r\n                } else {\r\n                    return null\r\n                }\r\n            }))\r\n        } else {\r\n            board.splice(x, 1, board[x].map((square, index) => {\r\n                if (index % 2 === 0) {\r\n                    return 'computer';\r\n                } else {\r\n                    return null\r\n                }\r\n            }))\r\n        }\r\n    }\r\n    \r\n\r\n    // Player pieces\r\n\r\n    for (let x = 5; x <= 7; x++) {\r\n        if (x % 2 === 0) {\r\n            board.splice(x, 1, board[x].map((square, index) => {\r\n                if (index % 2 !== 0) {\r\n                    return 'player';\r\n                } else {\r\n                    return null\r\n                }\r\n            }))\r\n        } else {\r\n            board.splice(x, 1, board[x].map((square, index) => {\r\n                if (index % 2 === 0) {\r\n                    return 'player';\r\n                } else {\r\n                    return null\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n   return board;\r\n\r\n}","\r\nexport const scoreCounter = (board = [], player) => {\r\n\r\n    const score = board.map(row => {\r\n        row = row.filter(square => square === player || square === `king-${player}`);\r\n        return row.length;\r\n    });\r\n\r\n\r\n\r\n    return 12 - score.reduce((a, b) => a + b, 0);\r\n\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { scoreCounter } from '../../helpers/scoreCounter';\r\nimport { BoardContext } from '../context/BoardContext';\r\nimport { GameContext } from '../context/GameContext';\r\n\r\nexport const Scores = () => {\r\n\r\n    const {board} = useContext(BoardContext);\r\n    const {gameHelpers, setGameHelpers} = useContext(GameContext);\r\n    const {gameHasStarted} = gameHelpers;\r\n    \r\n    if (gameHelpers.gameHasStarted &&\r\n       (scoreCounter(board, 'player') >= 12 || scoreCounter(board, 'computer') >= 12)) {\r\n\r\n            setGameHelpers({...gameHelpers, gameHasStarted: false})\r\n            \r\n            if(scoreCounter(board, 'player') >= 12) {\r\n                alert('The computer won :(');\r\n            }\r\n\r\n            if(scoreCounter(board, 'player') >= 12) {\r\n                alert('You won :)');\r\n            }\r\n\r\n       }\r\n\r\n\r\n    return (\r\n        <div id=\"scores\">\r\n            <h2>Scores</h2>\r\n\r\n            <div id=\"points-box\">\r\n                \r\n            <div>\r\n                <p>\r\n                    {\r\n                        (gameHasStarted) \r\n                        ? scoreCounter(board, 'computer')\r\n                        : '0'\r\n                    }\r\n                </p>\r\n                <small>You</small>\r\n            </div>\r\n\r\n            <div>\r\n                <p>\r\n                    {\r\n                        (gameHasStarted) \r\n                        ? scoreCounter(board, 'player')\r\n                        : '0'\r\n                    }\r\n                </p>\r\n                <small>Computer</small>\r\n            </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport {Board} from './components/board/Board';\nimport { BoardContext } from './components/context/BoardContext';\nimport { GameContext } from './components/context/GameContext';\nimport { Scores } from './components/scores/Scores';\nimport { createBoard } from './helpers/createBoard';\n\nexport const Checkers = () => {\n\n  const [board, setBoard] = useState(createBoard());\n  const [gameHelpers, setGameHelpers] = useState({\n    gameHasStarted: false,\n    isPieceSelected: false,\n    selectedPiecePosition: null,\n    isComputerTurn: false,\n  });\n\n  return (\n    <main>\n      <h1>\n        {\n          (!gameHelpers.gameHasStarted)\n          ? 'Checkers Game'\n          : (gameHelpers.gameHasStarted && !gameHelpers.isComputerTurn)\n          ? 'Your turn'\n          : 'Computer\\'s turn'\n        }\n      </h1>\n\n      <BoardContext.Provider value={{board, setBoard}}>\n          <GameContext.Provider value={{gameHelpers, setGameHelpers}}>\n            <Board />\n\n            {\n              (gameHelpers.gameHasStarted) \n              && <Scores />\n            }\n\n          </GameContext.Provider>\n      </BoardContext.Provider>\n\n    </main>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Checkers} from './Checkers';\n\nimport './styles.css';\n\nReactDOM.render(\n    <Checkers />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}